// React
import React, { useEffect, useState } from "react";

// Packages
import { useForm, useFormState } from 'react-hook-form';

// Utilities
import {
    useContext,
    useElseware,
    useLabels,
    useReflections,
    useWizardSubmit,
} from 'utilities/hooks';
import { useInitiativeDataStore } from 'utilities/store';

// Components
import WithAuth from 'components/withAuth'
import Button from 'components/button';
import WizardModal from 'components/wizardModal';
import NoReflections from 'components/_wizard/noReflections';
import TitlePreamble from 'components/_wizard/titlePreamble';
import { InputWrapper, FormFields } from 'components/_inputs';

const {{pascalCase name}}Component = () => {
    // ///////////////////
    // STORES
    // ///////////////////

    const { utilities, CONSTANTS } = useInitiativeDataStore();

    // ///////////////////
    // HOOKS
    // ///////////////////

    const { MODE, CONTEXTS, REPORT_ID } = useContext();
    const { label, object, pickList } = useLabels();
    const { ewCreateUpdateWrapper } = useElseware();
    const {
        submitMultipleNoReflections,
        submitMultipleReflections,
        getReflectionDefaultValue,
    } = useReflections({
        dataSet() {
            return utilities.xxx.getAll;
        },
        parentKey: 'Initiative_Xxx__c',
        type: CONSTANTS.REPORT_DETAILS.XXX,
    });

    // ///////////////////
    // STATE
    // ///////////////////

    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [modalIsSaving, setModalIsSaving] = useState(false);
    const [reflecting, setReflecting] = useState(false);
    const [updateId, setUpdateId] = useState(null);
    const [xyz, setXyz] = useState(null);

    // ///////////////////
    // FORMS
    // ///////////////////

    const mainForm = useForm();
    const { isDirty } = useFormState({ control: mainForm.control });
    const reflectionForm = useForm();

    // ///////////////////
    // SUBMIT
    // ///////////////////

    async function submit(formData) {
        // Modal save button state
        setModalIsSaving(true);
        try {
            const { Name } = formData;

            // Data for sf
            const data = {
                Name
            };

            // Update / Save
            const xxxData = await ewCreateUpdateWrapper(
                'initiative-xxx/initiative-xxx',
                updateId,
                data,
                { Initiative__c: utilities.initiative.get().Id },
                '_xxxs'
            );

            // Close modal
            setModalIsOpen(false);

            // Modal save button state
            setModalIsSaving(false);

            // Clear content in form
            mainForm.reset();

            // Fold out shit when done if report
            setTimeout(() => {
                if (MODE === CONTEXTS.REPORT) {
                    reflectionForm.setValue(`${xxxData.Id}-selector`, true);
                }
            }, 500);
        } catch (error) {
            // Modal save button state
            setModalIsSaving(false);
            console.warn(error);
        }
    }

    useWizardSubmit({
        [CONTEXTS.REPORT]: [reflectionForm, submitMultipleReflections],
    });

    // ///////////////////
    // DATA
    // ///////////////////

    // Current report details
    const currentReportDetails = utilities.reportDetails.getFromReportId(
        REPORT_ID
    );

    // Get xxx
    const xxx = utilities.xxx.getAll();

    // Check if there is relevant report details yet
    const reportDetailsItems = currentReportDetails.filter(item =>
        xxx.map(item => item.Id).includes(item.Initiative_Xxx__c)
    );

    // ///////////////////
    // EFFECTS
    // ///////////////////

    useEffect(() => {
        const {
            Name
        } = utilities.xxx.get(updateId);

        mainForm.setValue('Name', Name);
    }, [updateId, modalIsOpen]);

    // ///////////////////
    // FIELDS
    // ///////////////////

    const fields = [
        {
            type: 'Text',
            name: 'Name',
            label: object.label('Initiative_Xxx__c.Name'),
            required: true,
            // Type options
            subLabel: object.helpText('Initiative_Xxx__c.Name'),
        },
    ];

    // ///////////////////
    // RENDER
    // ///////////////////

    return (
        <>
            <TitlePreamble />
            <InputWrapper>
                {MODE === CONTEXTS.REPORT && xxx.length > 0 && (
                    <NoReflections
                        {...{
                            onClick: submitMultipleNoReflections,
                            reflectionItems: reportDetailsItems.map(
                                item => item.Description__c
                            ),
                            reflecting,
                        }}
                    />
                )}
                {xxx.map(xx => {
                    const reflection = currentReportDetails.find(
                        item => item.Initiative_Xxx__c === xx.Id
                    );
                    return (
                        <xxxCard
                            key={xx.Id}
                            headline={_get(xx, 'Name') || ''}
                            action={() => {
                                setUpdateId(xx.Id);
                                setXyz(xx);
                                setModalIsOpen(true);
                            }}
                            reflectAction={setReflecting}
                            controller={
                                MODE === CONTEXTS.REPORT &&
                                reflectionForm.control
                            }
                            name={xx.Id}
                            defaultValue={getReflectionDefaultValue(reflection)}
                            inputLabel={label(
                                'ReportWizardXxxReflectionSubHeading'
                            )}
                        />
                    );
                })}

                <Button
                    theme="teal"
                    className="self-start"
                    action={() => {
                        setUpdateId(null);
                        setModalIsOpen(true);
                    }}>
                    {label('ButtonAddXxx')}
                </Button>
            </InputWrapper>
            <WizardModal
                isOpen={modalIsOpen}
                title={label('WizardModalHeadingXxxs')}
                onCancel={() => setModalIsOpen(false)}
                isSaving={modalIsSaving}
                onSave={mainForm.handleSubmit(submit)}>
                <InputWrapper>
                    <FormFields
                        {...{
                            fields,
                            form: mainForm,
                        }}
                    />
                </InputWrapper>
            </WizardModal>
        </>
    );
};

{{pascalCase name}}Component.propTypes = {};

{{pascalCase name}}Component.defaultProps = {};

{{pascalCase name}}Component.layout = 'wizard';

export default WithAuth({{pascalCase name}}Component);